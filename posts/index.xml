<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on BetaCat.Dev</title>
		<link>https://betacat.dev/posts/</link>
		<description>Recent content in Posts on BetaCat.Dev</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Fri, 22 Mar 2019 00:00:00 +0000</lastBuildDate>
		<atom:link href="https://betacat.dev/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>循环中的闭包陷阱</title>
			<link>https://betacat.dev/posts/closure-trap-in-loop/</link>
			<pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate>
			
			<guid>https://betacat.dev/posts/closure-trap-in-loop/</guid>
			<description>多数内容翻译自 CommonMistakes
在 go 中进行循环操作时, 你有可能会使用 goroutine 并发的处理数据. 下面是一个使用闭包处理循环的例子
1 2 3 4 5  for _, val := range values { go func() { fmt.Println(val) }() }   </description>
			<content type="html"><![CDATA[<p>多数内容翻译自 <a href="https://github.com/golang/go/wiki/CommonMistakes" target="_blank">CommonMistakes</a></p>

<p>在 go 中进行循环操作时, 你有可能会使用 goroutine 并发的处理数据. 下面是一个使用闭包处理循环的例子</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">values</span> <span class="p">{</span>
	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span>
	<span class="p">}()</span>
<span class="p">}</span></code></pre></td></tr></table>
</div>
</div>
]]></content>
		</item>
		
	</channel>
</rss>
