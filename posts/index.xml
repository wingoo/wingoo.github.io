<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on BetaCat.Dev</title>
		<link>https://betacat.dev/posts/</link>
		<description>Recent content in Posts on BetaCat.Dev</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Fri, 22 Mar 2019 00:00:00 +0000</lastBuildDate>
		<atom:link href="https://betacat.dev/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>循环中的闭包陷阱</title>
			<link>https://betacat.dev/posts/closure-trap-in-loop/</link>
			<pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate>
			
			<guid>https://betacat.dev/posts/closure-trap-in-loop/</guid>
			<description>在 go 中进行循环操作时, 对于批量任务, 大多都会用 goroutine 来并发处理. 下面代码使用了 goroutine + closure
1 2 3 4 5  for _, val := range values { go func() { fmt.Println(val) }() }   相信熟悉的同学们已经看出来了, 这段代码是有问题的. 循环中变动的变量, 如果直接在闭包使用, 会导致 goroutine 处理时拿到的值可能是重复的值. 因为循环迭代使用了同一个变量, 所以每个闭包也都共享了这一个变量. 当闭包开始运行, 程序在 println 执行时打印了val的值, 但这个值在 goroutine 启动时可能已经被修改了, 或者说可能被修改了很多次. 可以用go vet来判断是否有此类似的问题.
为了绑定当前的val到每个启动后的闭包中, 需要在循环中新增变量. 一个方法是 将变量对闭包进行参数传递, 如下:
1 2 3 4 5  for _, val := range values { go func(val interface{}) { fmt.</description>
			<content type="html"><![CDATA[<p>在 go 中进行循环操作时, 对于批量任务, 大多都会用 goroutine 来并发处理. 下面代码使用了 goroutine + closure</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">values</span> <span class="p">{</span>
	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span>
	<span class="p">}()</span>
<span class="p">}</span></code></pre></td></tr></table>
</div>
</div>

<p>相信熟悉的同学们已经看出来了, 这段代码是有问题的. 循环中<code>变动</code>的变量, 如果直接在闭包使用, 会导致 goroutine 处理时拿到的值可能是重复的值. 因为循环迭代使用了同一个变量, 所以每个闭包也都共享了这一个变量. 当闭包开始运行, 程序在 println 执行时打印了<code>val</code>的值, 但这个值在 goroutine 启动时可能已经被修改了, 或者说可能被修改了很多次. 可以用<a href="https://golang.org/cmd/go/#hdr-Run_go_tool_vet_on_packages" target="_blank">go vet</a>来判断是否有此类似的问题.</p>

<p>为了绑定当前的<code>val</code>到每个启动后的闭包中, 需要在循环中新增变量. 一个方法是 将变量对闭包进行参数传递, 如下:</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">values</span> <span class="p">{</span>
	<span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">val</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span>
	<span class="p">}(</span><span class="nx">val</span><span class="p">)</span>
<span class="p">}</span></code></pre></td></tr></table>
</div>
</div>

<p>通过在闭包中传递参数, <code>val</code>变量在循环中被放在栈上,所以每一个循环中的变量在 goroutine 中都是有效的.</p>

<p>另外也可以在循环中定义局部变量来解决, 循环的每一次, 变量都会重新定义, 所以也不会在循环中被共享.</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">valslice</span> <span class="p">{</span>
	<span class="nx">val</span> <span class="o">:=</span> <span class="nx">valslice</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span>
	<span class="p">}()</span>
<span class="p">}</span></code></pre></td></tr></table>
</div>
</div>

<p><strong>如果不在循环中定义新的变量, 可能会造成预想之外的行为. 这个行为在未来的 go 版本中可能会修改, 但在 version 1的大版本中不会做改动, 详见<a href="https://golang.org/doc/faq#closures_and_goroutines" target="_blank">golang FAQ</a></strong></p>

<p>如果闭包不通过 goroutine 来执行, 则不会有问题, 下面的代码会打印1 -&gt; 10</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
	<span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
	<span class="p">}()</span>
<span class="p">}</span></code></pre></td></tr></table>
</div>
</div>

<p>正确执行的原因是, 在每次循环迭代时, 匿名函数都会在拿到当前变量后同步执行</p>

<p>下面是另外一种类似的情况</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">values</span> <span class="p">{</span>
	<span class="k">go</span> <span class="nx">val</span><span class="p">.</span><span class="nf">MyMethod</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">v</span> <span class="o">*</span><span class="nx">val</span><span class="p">)</span> <span class="nf">MyMethod</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
<span class="p">}</span></code></pre></td></tr></table>
</div>
</div>

<p>上面的代码依旧会只打印最后一个<code>val</code>的值, 原因同上, 要解决的话, 只需要在循环中新增一个变量即可</p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">values</span> <span class="p">{</span>
        <span class="nx">newVal</span> <span class="o">:=</span> <span class="nx">val</span>
	<span class="k">go</span> <span class="nx">newVal</span><span class="p">.</span><span class="nf">MyMethod</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">v</span> <span class="o">*</span><span class="nx">val</span><span class="p">)</span> <span class="nf">MyMethod</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
<span class="p">}</span></code></pre></td></tr></table>
</div>
</div>

<hr />

<p>现在, 我们可以整理总结下, 循环中变量的使用规则</p>

<ol>
<li>循环中如果不存在延迟执行, 则没有问题.</li>
<li>循环之外定义的变量, 如果只是读取也没有问题</li>
<li>可以通过临时变量保存循环的变量值, 以保证后续延迟执行的调用可靠</li>
</ol>

<hr />

<p>好吧, 之所以翻译这篇文章, 是因为遇到了异常, 直接看代码吧 <a href="https://play.golang.org/p/CMJWCOM4OCl" target="_blank">go paly</a></p>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">bb</span> <span class="o">:=</span> <span class="p">[]</span><span class="nx">ccc</span><span class="p">{{</span><span class="nx">aa</span><span class="p">:</span> <span class="mi">11</span><span class="p">,</span> <span class="nx">bb</span><span class="p">:</span> <span class="mi">22</span><span class="p">},</span> <span class="p">{</span><span class="nx">aa</span><span class="p">:</span> <span class="mi">111</span><span class="p">,</span> <span class="nx">bb</span><span class="p">:</span> <span class="mi">222</span><span class="p">},}</span>
<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">bb</span> <span class="p">{</span>
    <span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">i</span> <span class="o">*</span><span class="nx">ccc</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
    <span class="p">}(</span><span class="o">&amp;</span><span class="nx">i</span><span class="p">)</span>
<span class="p">}</span></code></pre></td></tr></table>
</div>
</div>

<p>第五行, 传递的 i 的引用, 尽管遵从了闭包参数传递的规则, 但因为传送的是变量地址, 所以仍然导致问题. 如果去除引用传递, 则没有问题, 不管<code>ccc</code>的值是 struct 还是指针.</p>

<p>Reference:</p>

<ul>
<li><a href="https://github.com/golang/go/wiki/CommonMistakes" target="_blank">CommonMistakes</a></li>
<li><a href="https://golang.org/doc/faq#closures_and_goroutines" target="_blank">golang FAQ</a></li>
</ul>
]]></content>
		</item>
		
	</channel>
</rss>
